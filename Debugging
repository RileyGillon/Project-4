I inserted an tree.collect_values(); into the ‘B’ command to see the list of integers to find out if I was inserting or removing them correctly

____________________________________________________________________________


This was created so that I could better understand how the list of integers worked

#include <iostream>
#include <vector>
#include <limits>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();  // Clear error flags
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');  // Discard invalid input
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Display the entered values
    cout << "\nYou entered: ";
    for (int value : initial_values) {
        cout << value << " ";
    }
    cout << endl;
    
    return 0;
}
 

____________________________________________________________________________

This code helped me figure out how the ‘F’ command worked

#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Display the entered values
    cout << "\nYou entered: ";
    for (int value : initial_values) {
        cout << value << " ";
    }
    cout << endl;
    
    // Search functionality
    cout << "\nTo find a number, type F followed by the number (e.g., 'F 42')\n";
    cout << "Or type any other character to exit: ";
    
    char command;
    while (cin >> command && (command == 'F' || command == 'f')) {
        int search_number;
        if (cin >> search_number) {
            auto it = find(initial_values.begin(), initial_values.end(), search_number);
            if (it != initial_values.end()) {
                int position = it - initial_values.begin();
                cout << search_number << " found at position " << position + 1 << endl;
            } else {
                cout << search_number << " not found in the array" << endl;
            }
        } else {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid number format" << endl;
        }
        cout << "\nEnter F followed by a number to search again, or any other character to exit: ";
    }
    
    cout << "Program terminated." << endl;
    return 0;
}

____________________________________________________________________________

#include <iostream>
#include <cassert>
#include <sstream>

// Include the M-Tree code here...

void runTests() {
    // Test 1: Basic insertion and find
    MTree<int> tree(3);  // 3-way tree
    tree.insert(5);
    tree.insert(3);
    tree.insert(7);
    assert(tree.find(5));
    assert(tree.find(3));
    assert(tree.find(7));
    assert(!tree.find(4));
    
    // Test 2: Splitting
    tree.insert(2);
    tree.insert(6);
    auto values = tree.collect_values();
    assert(values.size() == 5);
    
    // Test 3: Removal
    tree.remove(5);
    assert(!tree.find(5));
    values = tree.collect_values();
    assert(values.size() == 4);
    
    // Test 4: Build tree from array
    vector<int> initial_values = {1, 2, 3, 4, 5, 6};
    tree.buildTree(initial_values);
    values = tree.collect_values();
    assert(values.size() == 6);
    
    // Test 5: Exception handling
    bool caught_duplicate = false;
    try {
        tree.insert(1);  // Should throw duplicateInsertion
    } catch (const duplicateInsertion&) {
        caught_duplicate = true;
    }
    assert(caught_duplicate);
    
    bool caught_not_found = false;
    try {
        tree.remove(99);  // Should throw NotFoundException
    } catch (const NotFoundException&) {
        caught_not_found = true;
    }
    assert(caught_not_found);
    
    cout << "All tests passed!" << endl;
}

int main() {
    runTests();
    return 0;
}

____________________________________________________________________________

#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Display the entered values
    cout << "\nYou entered: ";
    for (int value : initial_values) {
        cout << value << " ";
    }
    cout << endl;
    
    // Search functionality
    cout << "\nTo find a number, type F followed by the number (e.g., 'F 42')\n";
    cout << "Or type any other character to exit: ";
    
    char command;
    while (cin >> command && (command == 'F' || command == 'f')) {
        int search_number;
        if (cin >> search_number) {
            auto it = find(initial_values.begin(), initial_values.end(), search_number);
            if (it != initial_values.end()) {
                int position = it - initial_values.begin();
                cout << search_number << " found at position " << position + 1 << endl;
            } else {
                cout << search_number << " not found in the array" << endl;
            }
        } else {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid number format" << endl;
        }
        cout << "\nEnter F followed by a number to search again, or any other character to exit: ";
    }
    
    cout << "Program terminated." << endl;
    return 0;
}












____________________________________________________________________________


#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
#include <stdexcept>
using namespace std;

// Custom exceptions
class duplicateInsertion : public std::runtime_error {
public:
    duplicateInsertion() : runtime_error("Duplicate value") {}
};

class NotFoundException : public std::runtime_error {
public:
    NotFoundException() : runtime_error("Value not found") {}
};

// Node structure for BST
struct Node {
    int value;
    Node* left;
    Node* right;
    Node(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Binary Search Tree class
class BinarySearchTree {
private:
    Node* root;

    Node* insertRecursive(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }
        
        if (value == node->value) {
            throw duplicateInsertion();
        }
        
        if (value < node->value) {
            node->left = insertRecursive(node->left, value);
        } else {
            node->right = insertRecursive(node->right, value);
        }
        return node;
    }

    Node* findMin(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    Node* removeRecursive(Node* node, int value) {
        if (node == nullptr) {
            throw NotFoundException();
        }

        if (value < node->value) {
            node->left = removeRecursive(node->left, value);
        } else if (value > node->value) {
            node->right = removeRecursive(node->right, value);
        } else {
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }
            Node* temp = findMin(node->right);
            node->value = temp->value;
            node->right = removeRecursive(node->right, temp->value);
        }
        return node;
    }

    bool findRecursive(Node* node, int value) {
        if (node == nullptr) {
            return false;
        }
        if (node->value == value) {
            return true;
        }
        return value < node->value ? 
               findRecursive(node->left, value) : 
               findRecursive(node->right, value);
    }

    void collectValuesRecursive(Node* node, vector<int>& values) {
        if (node == nullptr) return;
        collectValuesRecursive(node->left, values);
        values.push_back(node->value);
        collectValuesRecursive(node->right, values);
    }

    void deleteTree(Node* node) {
        if (node == nullptr) return;
        deleteTree(node->left);
        deleteTree(node->right);
        delete node;
    }

    Node* buildBalancedTree(const vector<int>& values, int start, int end) {
        if (start > end) return nullptr;
        
        int mid = (start + end) / 2;
        Node* node = new Node(values[mid]);
        
        node->left = buildBalancedTree(values, start, mid - 1);
        node->right = buildBalancedTree(values, mid + 1, end);
        
        return node;
    }

public:
    BinarySearchTree() : root(nullptr) {}
    
    ~BinarySearchTree() {
        deleteTree(root);
    }

    void insert(int value) {
        root = insertRecursive(root, value);
    }

    void remove(int value) {
        root = removeRecursive(root, value);
    }

    bool find(int value) {
        return findRecursive(root, value);
    }

    vector<int> collect_values() {
        vector<int> values;
        collectValuesRecursive(root, values);
        return values;
    }

    void buildTree(const vector<int>& values) {
        deleteTree(root);
        vector<int> sorted_values = values;
        sort(sorted_values.begin(), sorted_values.end());
        root = buildBalancedTree(sorted_values, 0, sorted_values.size() - 1);
    }
};

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Create and build the BST
    BinarySearchTree tree;
    for (int value : initial_values) {
        try {
            tree.insert(value);
        } catch (const duplicateInsertion&) {
            cout << "Duplicate value ignored: " << value << endl;
        }
    }

    cout << "\nBinary Search Tree Operations:\n";
    cout << "I <value> - Insert value\n";
    cout << "R <value> - Remove value\n";
    cout << "F <value> - Find value\n";
    cout << "B - Rebuild tree\n";
    cout << "Q - Quit\n";

    char command;
    int value;

    while (true) {
        cout << "\nEnter command: ";
        cin >> command;
        
        if (command == 'Q' || command == 'q') {
            break;
        }

        if (command != 'B' && command != 'b') {
            if (!(cin >> value)) {
                cin.clear();
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                cout << "Invalid input format" << endl;
                continue;
            }
        }

        try {
            switch (toupper(command)) {
                case 'I':
                    try {
                        tree.insert(value);
                        cout << "The value = " << value << " has been inserted." << endl;
                    } catch (const duplicateInsertion&) {
                        cout << "The value = " << value << " already in the tree." << endl;
                    }
                    break;
                case 'R':
                    try {
                        tree.remove(value);
                        cout << "The value = " << value << " has been removed." << endl;
                    } catch (const NotFoundException&) {
                        cout << "The value = " << value << " not found." << endl;
                    }
                    break;
                case 'F':
                    if (tree.find(value)) {
                        cout << "The element with value = " << value << " was found." << endl;
                    } else {
                        cout << "The element with value = " << value << " not found." << endl;
                    }
                    break;
                case 'B':
                    {
                        auto values = tree.collect_values();
                        tree.buildTree(values);
                        cout << "The tree has been rebuilt." << endl;
                    }
                    break;
                default:
                    cout << "Invalid command" << endl;
            }
        } catch (const std::exception& e) {
            cout << "Error: " << e.what() << endl;
        }
    }

    cout << "Program terminated." << endl;
    return 0;
}

____________________________________________________________________________

#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Display the entered values
    cout << "\nYou entered: ";
    for (int value : initial_values) {
        cout << value << " ";
    }
    cout << endl;
    
    // Search functionality
    cout << "\nTo find a number, type F followed by the number (e.g., 'F 42')\n";
    cout << "Or type any other character to exit: ";
    
    char command;
    while (cin >> command && (command == 'F' || command == 'f')) {
        int search_number;
        if (cin >> search_number) {
            auto it = find(initial_values.begin(), initial_values.end(), search_number);
            if (it != initial_values.end()) {
                int position = it - initial_values.begin();
                cout << search_number << " found at position " << position + 1 << endl;
            } else {
                cout << search_number << " not found in the array" << endl;
            }
        } else {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid number format" << endl;
        }
        cout << "\nEnter F followed by a number to search again, or any other character to exit: ";
    }
    
    cout << "Program terminated." << endl;
    return 0;
}


____________________________________________________________________________

#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
#include <stdexcept>
using namespace std;

// Custom exceptions
class duplicateInsertion : public std::runtime_error {
public:
    duplicateInsertion() : runtime_error("Duplicate value") {}
};

class NotFoundException : public std::runtime_error {
public:
    NotFoundException() : runtime_error("Value not found") {}
};

// Node structure for BST
struct Node {
    int value;
    Node* left;
    Node* right;
    Node(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Binary Search Tree class
class BinarySearchTree {
private:
    Node* root;

    Node* insertRecursive(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }
        
        if (value == node->value) {
            throw duplicateInsertion();
        }
        
        if (value < node->value) {
            node->left = insertRecursive(node->left, value);
        } else {
            node->right = insertRecursive(node->right, value);
        }
        return node;
    }

    Node* findMin(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    Node* removeRecursive(Node* node, int value) {
        if (node == nullptr) {
            throw NotFoundException();
        }

        if (value < node->value) {
            node->left = removeRecursive(node->left, value);
        } else if (value > node->value) {
            node->right = removeRecursive(node->right, value);
        } else {
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }
            Node* temp = findMin(node->right);
            node->value = temp->value;
            node->right = removeRecursive(node->right, temp->value);
        }
        return node;
    }

    bool findRecursive(Node* node, int value) {
        if (node == nullptr) {
            return false;
        }
        if (node->value == value) {
            return true;
        }
        return value < node->value ? 
               findRecursive(node->left, value) : 
               findRecursive(node->right, value);
    }

    void collectValuesRecursive(Node* node, vector<int>& values) {
        if (node == nullptr) return;
        collectValuesRecursive(node->left, values);
        values.push_back(node->value);
        collectValuesRecursive(node->right, values);
    }

    void deleteTree(Node* node) {
        if (node == nullptr) return;
        deleteTree(node->left);
        deleteTree(node->right);
        delete node;
    }

    Node* buildBalancedTree(const vector<int>& values, int start, int end) {
        if (start > end) return nullptr;
        
        int mid = (start + end) / 2;
        Node* node = new Node(values[mid]);
        
        node->left = buildBalancedTree(values, start, mid - 1);
        node->right = buildBalancedTree(values, mid + 1, end);
        
        return node;
    }

public:
    BinarySearchTree() : root(nullptr) {}
    
    ~BinarySearchTree() {
        deleteTree(root);
    }

    void insert(int value) {
        root = insertRecursive(root, value);
    }

    void remove(int value) {
        root = removeRecursive(root, value);
    }

    bool find(int value) {
        return findRecursive(root, value);
    }

    vector<int> collect_values() {
        vector<int> values;
        collectValuesRecursive(root, values);
        return values;
    }

    void buildTree(const vector<int>& values) {
        deleteTree(root);
        vector<int> sorted_values = values;
        sort(sorted_values.begin(), sorted_values.end());
        root = buildBalancedTree(sorted_values, 0, sorted_values.size() - 1);
    }
};

int main() {
    int n;
    cout << "Enter the number of integers: ";
    cin >> n;
    
    // Input validation
    if (n <= 0) {
        cout << "Please enter a positive number." << endl;
        return 1;
    }
    
    vector<int> initial_values(n);
    cout << "Enter " << n << " integers:" << endl;
    
    // Input the values with error checking
    for (int i = 0; i < n; ++i) {
        while (!(cin >> initial_values[i])) {
            cin.clear();
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer for position " << i + 1 << ": ";
        }
    }
    
    // Create and build the BST
    BinarySearchTree tree;
    for (int value : initial_values) {
        try {
            tree.insert(value);
        } catch (const duplicateInsertion&) {
            cout << "Duplicate value ignored: " << value << endl;
        }
    }

    cout << "\nBinary Search Tree Operations:\n";
    cout << "I <value> - Insert value\n";
    cout << "R <value> - Remove value\n";
    cout << "F <value> - Find value\n";
    cout << "B - Rebuild tree\n";


    char command;
    int value;
    
    int num;
    
    cin >> num;

    for (int i = 0; i < num; i++) {
        cout << "\nEnter command: ";
        cin >> command;


        if (command != 'B' && command != 'b') {
            if (!(cin >> value)) {
                cin.clear();
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                cout << "Invalid input format" << endl;
                continue;
            }
        }

        try {
            switch (toupper(command)) {
                case 'I':
                    try {
                        tree.insert(value);
                        cout << "The value = " << value << " has been inserted." << endl;
                    } catch (const duplicateInsertion&) {
                        cout << "The value = " << value << " already in the tree." << endl;
                    }
                    break;
                case 'R':
                    try {
                        tree.remove(value);
                        cout << "The value = " << value << " has been removed." << endl;
                    } catch (const NotFoundException&) {
                        cout << "The value = " << value << " not found." << endl;
                    }
                    break;
                case 'F':
                    if (tree.find(value)) {
                        cout << "The element with value = " << value << " was found." << endl;
                    } else {
                        cout << "The element with value = " << value << " not found." << endl;
                    }
                    break;
                case 'B':
                    {
                        auto values = tree.collect_values();
                        tree.buildTree(values);
                        cout << "The tree has been rebuilt." << endl;
                    }
                    break;
                default:
                    cout << "Invalid command" << endl;
            }
        } catch (const std::exception& e) {
            cout << "Error: " << e.what() << endl;
        }
    }

    cout << "Program terminated." << endl;
    return 0;
}








